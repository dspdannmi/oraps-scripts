#!/bin/bash

#+++___________________________________________________________________________________
#
#
# Script name:                  getinfo-ohome
#
# Description:
#
# Parameters:
#
# Environment:
#
# Return codes:
#
# Modification history:
#
#       22-Oct-2025     1.0     oracle    Original version
#
#+++___________________________________________________________________________________

CS_TOP=/opt/dsp
. ${CS_TOP}/env/dsp.env
. ${CS_TOP}/env/funcs.sh

USAGE_STRING="[-o ORACLE_HOME] [-m lite|basic|comp]"

mode="lite"

while getopts 'o:m:' OPTION
do
    case "$OPTION" in
        o) ORACLE_HOME=$OPTARG ;;
        m) echo "YAY" ; mode=$OPTARG ;;
        ?) usage ;;
    esac
done

echo ORACLE_HOME=${ORACLE_HOME}
echo mode=$mode

case "${mode}" in
    [lL][iI][tT][eE] ) echo lite ;;
    [bB][aA][sS][iI][cC] ) echo basic ;;
    [cC][oO][mM][pP] ) echo comp ;;
    *) echo ERROR ;;
esac

exit 0

if [ ! -d ${ORACLE_HOME} ]
then
   ehco "ERROR: ${ORACLE_HOME} does not exist - exiting"
   exit 1
fi

typeset -i lvl
typeset -i level


export PATH=${ORACLE_HOME}/OPatch:${ORACLE_HOME}/bin:${PATH}

function print_begin
    {
    padding=""
    lvl=1
    while [ ${lvl} -lt ${level} ]
    do
        padding="    ${padding}"
        let lvl=${lvl}+1
    done

    echo "${padding}<BEGIN_${1}>"
    }


function print_end
    {
    padding=""
    lvl=1
    while [ ${lvl} -lt ${level} ]
    do
        padding="    ${padding}"
        let lvl=${lvl}+1
    done

    echo "${padding}<END_${1}>"
    }


function show_databases
    {
    level=$1
    TAG=DATABASES

    echo "ORACLE_HOME:   ${ORACLE_HOME}"
    echo ""
    print_begin ${TAG}
    awk -F: -v v_ohome=${ORACLE_HOME} '$2==v_ohome {print $1}' ${ORATAB} | grep ^[a-zA-Z0-9_$] | sort | sed -e 's/^/        /'
    print_end ${TAG}
    }

function show_opatch_version
    {
    level=$1
    TAG=OPATCH_VERSION

    print_begin ${TAG}
    ${ORACLE_HOME}/OPatch/opatch version | sed -e s'/^/        /'
    status=$?
    print_end ${TAG}
    }

function show_opatch_lspatches
    {
    level=$1
    TAG=OPATCH_LSPATCHES

    print_begin ${TAG}
    ${ORACLE_HOME}/OPatch/opatch lspatches | sed -e s'/^/        /'
    status=$?
    print_end ${TAG}
    }

function show_opatch_lsinventory
    {
    level=$1
    TAG=OPATCH_LSINVENTORY

    print_begin ${TAG}
    ${ORACLE_HOME}/OPatch/opatch lsinventory | sed -e s'/^/        /'
    status=$?
    print_end ${TAG}
    }

LEVEL=1


#
# Define local script variables
#

#
# Script starts here
#
#
set_error_trap

level=1
TAG=ORACLE_HOME_DATABASE

print_begin ${TAG}

(
#
# run in subshell so as not to interfere with
# TAG setting as each of the functions below
# set TAG and without subshell
show_databases 2
show_opatch_version 2
show_opatch_lspatches 2
show_opatch_lsinventory 2
)

print_end ${TAG}

exit $EXITCODE

