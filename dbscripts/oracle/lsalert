#!/bin/bash

#+++___________________________________________________________________________________
#
#
# Script name:                  xxxxx
#
# Description:
#
# We base it on setting of ALERTLOG so we can still see / interact with the alert log
# when database is down.  If we had to rely on DB being up to get location then likely
# fine for most times but makes it difficult when DB is down and want to easy see the
# alert log.  Could extend this such that one can choose with switch whether to get
# alert log location fresh from DB or oterhwise use ALERRTLOG environment variable
#
# Parameters:
#
# Environment:
#
# Return codes:
#
# Modification history:
#
#       14-Jan-2004     1.0     oracle    Original version
#
#+++___________________________________________________________________________________

CS_TOP=${CS_TOP:-/opt/dsp}
. ${CS_TOP}/env/dsp.env
. ${CS_TOP}/env/funcs.sh

USAGE_STRING="[-l #lines] [-d SID] [-f]"

new_sid=${ORACLE_SID}	# assume we are working with current ORACLE_SID unless
                        # parameter suggests otherwise
while getopts 'd:' OPTION
do
    case "$OPTION" in
        d) new_sid=$OPTARG ;;
        ?) usage ;;
    esac
done

shift $((OPTIND-1))

if [ "${new_sid}" != "${ORACLE_SID}" ]
then
   export ORACLE_SID=${new_sid}

   if chkoradbinoratab ${ORACLE_SID}
   then
       :
   else
       echo "ERROR: $ORACLE_SID not in [${ORATAB}]"
       EXITCODE=1
       exit ${EXITCODE}
   fi

   . /usr/local/bin/oraenv 2>&1 > /dev/null

   if chkorainstsysdba $ORACLE_SID
   then
       :
   else
       echo "ERROR: $ORACLE_SID is not up"
       EXITCODE=1
       exit ${EXITCODE}
   fi

fi

if [ "$ORACLE_SID" = "" ]
then
    echo ERROR: ORACLE_SID not set
    exit 1
else
    expected_alertlog_name=alert_${ORACLE_SID}.log
fi

if [ "${ALERTLOG}" != "" ]
then
    if [ -f ${ALERTLOG} ]
    then
      if [ "$(basename ${ALERTLOG})" = "${expected_alertlog_name}" ]
      then
        # ALERTLOG is set and file exists
        echo ""
        echo "==================================================================================="
        echo "ALERT LOG: ${ALERTLOG}" 
        echo "==================================================================================="
        echo ". . ."
        echo ". . ."
        echo ". . ."

        ls -ald ${ALERTLOG}	
      else
          echo "ERROR: ALERTLOG is set but filename [$(basename ${ALERTLOG})] does not match expected [${expected_alertlog_name}] - exiting"
          EXITCODE=1
          exit $EXITCODE
      fi
    else
        :
    fi
else
    setalertlogvar
    ls -ald ${ALERTLOG}
fi

#
# end of script
#
