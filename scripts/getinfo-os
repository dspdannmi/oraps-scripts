#!/bin/bash

#+++___________________________________________________________________________________
#
#
# Script name:                  getinfo-os
#
# Description:
#
# Parameters:
#
# Environment:
#
# Return codes:
#
# Modification history:
#
#       22-Oct-2025     1.0     oracle    Original version
#
#+++___________________________________________________________________________________

CS_TOP=/opt/dsp
. ${CS_TOP}/env/dsp.env
. ${CS_TOP}/env/funcs.sh

USAGE_STRING="[-s human|machine]"

mode="lite"
style="human"

while getopts 'o:m:s:' OPTION
do
    case "$OPTION" in
        o) ORACLE_HOME=$OPTARG ;;
        m) mode=$OPTARG ;;
        s) style=$OPTARG ;;
        ?) usage ;;
    esac
done

case "${mode}" in
    [lL][iI][tT][eE] ) mode=lite ;;
    [bB][aA][sS][iI][cC] ) mode=basic ;;
    [cC][oO][mM][pP] ) mode=comp ;;
    *) echo "ERROR: invalid mode [${mode}] - exiting" ; exit 1 ;;
esac

case "${style}" in
    [hH][uU][mM][aA][nN]) style=human;;
    [mM][aA][cC][hH][iI][nN][eE]) style=machine;;
    *) echo "ERROR: invalid style [${style}] - exiting" ; exit 1 ;;
esac


typeset -i lvl
typeset -i level



function print_begin
    {
    padding=""
    lvl=1
    while [ ${lvl} -lt ${level} ]
    do
        padding="    ${padding}"
        let lvl=${lvl}+1
    done

    if [ "${style}" = "human" ]
    then
        echo "${padding}---------------------------------------------------"
        echo "${padding}${1}"
        echo "${padding}---------------------------------------------------"
    else
        echo "${padding}<BEGIN_${1}>"
    fi
    }


function print_end
    {
    padding=""
    lvl=1
    while [ ${lvl} -lt ${level} ]
    do
        padding="    ${padding}"
        let lvl=${lvl}+1
    done

    if [ "${style}" = "human" ]
    then
        echo ""
    else
        echo "${padding}<END_${1}>"
    fi
    }



function get_uptime()
    {
    upSeconds="$(/usr/bin/cut -d. -f1 /proc/uptime)"
    secs=$((${upSeconds}%60))
    mins=$((${upSeconds}/60%60))
    hours=$((${upSeconds}/3600%24))
    days=$((${upSeconds}/86400))
    UPTIME=`printf "%d days, %02dh %02dm %02ds" "$days" "$hours" "$mins" "$secs"`
    }

function get_lastboot()
    {
    LASTBOOT=$(uptime -s 2>/dev/null)
    status=$?

    if [ $status != 0 ]
    then
        #uptime -s likely not available
        LASTBOOT=$(who -b | sed -e 's/.*system boot[ ]*\([0-9].*$\)/\1/')   # eg. system boot  2025-08-06 09:08
    fi
    }

function get_systemrelease()
    {
    if [ -f /etc/system-release ]
    then
        SYSTEM_RELEASE=$(cat /etc/system-release)
    elif [ -f /etc/oracle-release ]
    then
        SYSTEM_RELEASE=$(cat /etc/oracle-release)
    elif [ -f /etc/redhat-release ]
    then
        SYSTEM_RELEASE=$(cat /etc/reddhat-release)
    elif [ -f /etc/enterprise-release ]
    then
        SYSTEM_RELEASE=$(cat /etc/enterprise-release)
    elif [ -f /etc/os-release ]
    then
        SYSTEM_RELEASE=$(grep -i ^PRETTY_NAME= /etc/os-release | cut -d\" -f2)
    else
        SYSTEM_RELEASE="<unknown>"
    fi
    }

function get_meminfo
    {
    MEM_FREE=$(free -h 2>/dev/null | grep ^Mem: | awk '{print $4}')
    status=$?
    
    if [ "${MEM_FREE}" != "" ]
    then
        MEM_TOTAL=$(free -h | grep ^Mem: | awk '{print $2}')
    
        SWAP_FREE=$(free -h | grep ^Swap: | awk '{print $4}')
        SWAP_TOTAL=$(free -h | grep ^Swap: | awk '{print $2}')
    else
        MEM_FREE="$(free -m | grep ^Mem: | awk '{print $4}')Mb"
        MEM_TOTAL="$(free -m | grep ^Mem: | awk '{print $2}')Mb"
    
        SWAP_FREE="$(free -m | grep ^Swap: | awk '{print $4}')Mb"
        SWAP_TOTAL="$(free -m | grep ^Swap: | awk '{print $2}')Mb"
    fi
    }


function get_cpuinfo
    {
    NUM_CPUS=$(grep -i '^processor' /proc/cpuinfo | wc -l)
    NUM_CORES=$(grep -i '^core id' /proc/cpuinfo | sort -u | wc -l)	# need to sort and get unique for cores
    }


#
# Define local script variables
#
HOSTNAME_HOSTNAME=$(hostname)
HOSTNAME_IP_ADDRESSES=$(hostname -I)

#
# uname
#
UNAME_KERNEL_NAME=$(uname -s)
UNAME_NODENAME=$(uname -n)
UNAME_KERNEL_RELEASE=$(uname -r)
UNAME_KERNEL_VERSION=$(uname -v)
UNAME_MACHINE=$(uname -m)
UNAME_PROCESSOR=$(uname -p)
UNAME_HARDWARE_PLATFORM=$(uname -i)
UNAME_OPERATING_SYSTEM=$(uname -o)


get_uptime
get_lastboot
get_systemrelease
get_cpuinfo
get_meminfo

#
# Script starts here
#
#
set_error_trap

level=1
TAG=OPERATING-SYSTEM

print_begin ${TAG}

padding="    ${padding}"
echo 

echo "${padding}HOSTNAME:          ${HOSTNAME_HOSTNAME}"
echo "${padding}DSP SERVER ID:     ${dspserverid}"
echo ""
echo "${padding}OS:                ${UNAME_OPERATING_SYSTEM}"
echo "${padding}ARCHITECTURE:      ${UNAME_HARDWARE_PLATFORM}"
echo "${padding}SYSTEM RELEASE:    ${SYSTEM_RELEASE}"
echo "${padding}KERENL RELEASE:    ${UNAME_KERNEL_RELEASE}"
echo "${padding}KERENL VERSION:    ${UNAME_KERNEL_VERSION}"
echo ""
echo "${padding}UPTIME:            ${UPTIME}"
echo "${padding}LAST BOOT:         ${LASTBOOT}"
echo ""
echo "${padding}NUM (v)CPUs:       ${NUM_CPUS}"
echo "${padding}NUM CORES:         ${NUM_CORES}"
echo ""
echo "${padding}MEMORY:"
echo "${padding}${padding}TOTAL:         ${MEM_TOTAL}"
echo "${padding}${padding}FREE:          ${MEM_FREE}"
echo "${padding}SWAP:"
echo "${padding}${padding}TOTAL:         ${SWAP_TOTAL}"
echo "${padding}${padding}FREE:          ${SWAP_FREE}"
echo ""
echo "${padding}IP ADDRESSES:"
showipaddrs | sed -e "s/^/${padding}${padding}/"

echo ""
echo "${padding}MAC ADDRESSES:"
showmacaddrs | sed -e "s/^/${padding}${padding}/"


print_end ${TAG}

exit $EXITCODE

